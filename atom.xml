<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coder&#39;s Cat</title>
  <icon>http://coderscat.com/icon.png</icon>
  <subtitle>Be a Better Programmer</subtitle>
  <link href="http://coderscat.com/atom.xml" rel="self"/>
  
  <link href="http://coderscat.com/"/>
  <updated>2022-02-11T06:36:12.195Z</updated>
  <id>http://coderscat.com/</id>
  
  <author>
    <name>Nick Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>3 Things I&#39;ve Learned From 10 Years on Github</title>
    <link href="http://coderscat.com/things-learned-from-github-and-opensource/"/>
    <id>http://coderscat.com/things-learned-from-github-and-opensource/</id>
    <published>2021-12-31T14:09:00.000Z</published>
    <updated>2022-02-11T06:36:12.195Z</updated>
    
    <content type="html"><![CDATA[<p>I started to use <a href="https://github.com/chenyukang">Github in 2010</a>, when I have learned Git, Ruby in that days.  Github was initially built in Ruby on Rails, so I heard of it in the community. I thought it is nice to have a site to back up my code, so I give it a try.</p><p>I began my career as a software engineer in the next year.  Unexpectedly, after so many years, learning from Github and contributing to open source has become a habit, hobby, and lifestyle. </p><p>I almost use Github every day, whenever I have written code in my spare time I will share it, I also learn from Github since there are so many excellent references and open-source code on it.  </p><p> In the past year, and I had more time to code in my spare time:  (Ignore the number of committing in the last two months, because there is a script to sync notes every day üòÅ)</p><p><img src="/images/ob_pasted-image-20211213171045.png"></p><p>Here, I‚Äôd like to share the gains from my 10 years of experience.</p><h2 id="Self-improvement"><a href="#Self-improvement" class="headerlink" title="Self-improvement"></a>Self-improvement</h2><p>I will suggest anyone who is learning to code and wants to improve development skills participate in open source contribution. </p><p>Now software development has passed the slash-and-burn era. Most software development nowadays needs to reuse a large number of existing libraries and tools. Large-scale software development is a socialized, intellectual collaboration activity. Sharing code on Github and contributing to other open-source projects is the best way to practice this kind of ability, collaboration ability, and the ability to reuse existing code. </p><p>After staying on Github for such a long time,  I prefer to the way of <a href="https://coderscat.com/learn-from-source-code/">Learn from Source Code</a> and practicing,  and have built a natural habit to contribute.  For instance:</p><ul><li>I want to learn WebAssembly, so I check out this runtime <a href="https://github.com/wasmerio/wasmer">wasmerio/wasmer</a> to learn from it, and fixed some of the <a href="https://github.com/wasmerio/wasmer/pulls?q=is:pr+is:closed+author:chenyukang">problems I found by the way</a>.</li><li>I saw some defects in an Obsidian plugin, so I fix it by myself and discuss with the author on <a href="https://github.com/tadashi-aikawa/obsidian-various-complements-plugin/issues/30">how to improve</a>.</li><li>When coding in Rust, I saw some repeated warnings. I searched on Github and found that others have also encountered it, and then I took the time to make a <a href="https://github.com/rust-lang/rust/pull/88493">PR to fix it</a>.</li><li>I want to understand how the container is implemented, so I found the open-source code <a href="https://github.com/containers/youki">containers/youki</a> to learn, and then fix my <a href="https://github.com/containers/youki/pulls?q=is:pr+author:chenyukang+is:closed">found problems</a> and I even became a maintainer.</li></ul><p>I have learned a lot myself in this process. I‚Äôm not only a user and consumer but also a creator and contributor. This makes a huge difference in my career as a software developer.</p><p>Contributing to open source belongs to <a href="https://wsvincent.com/working-in-public-book-review/">Working in Public</a> and also <a href="https://www.swyx.io/learn-in-public/">Learn in Public</a>. The advantage of working in public is that our contributions can be counted as proof of ability. Your Github profile <a href="https://www.codecademy.com/resources/blog/how-to-use-github-to-strengthen-your-resume/">is the best resume</a>. </p><p>In the past few years, I have met some interviewers who recognize my open-source contributions and don‚Äôt give that brain-tester kind of LeetCode questions in interviews.</p><h2 id="Create-value"><a href="#Create-value" class="headerlink" title="Create value"></a>Create value</h2><p>Our code may not create value by ourselves, but it may help others if we shared it with the world.</p><p>When I was reading the book ‚ÄúEssentials of Programming Languages‚Äù, I had implemented the most of exercises while studying: <a href="https://github.com/chenyukang/eopl">my solutions to EOPL3</a>.  I will receive some emails from students to ask questions on learning, or help me to fix the issues in code. Because this book is a textbook for some universities, my code is a good reference for them. </p><p>For another instance, I shared a maze generation program that I implemented when  learning data structures and algorithms, and then I wrote some articles on  A* pathfinding algorithms. Someday, a professor at Shanghai University saw my article and asked if I could help them solve a program issue. They want to calculate the kth shortest path in more than 1w nodes. I spent some spare time helping them implement the core algorithm in C. They later published the <a href="https://pubs.rsc.org/en/content/articlelanding/2013/mb/c3mb70089e#!divRelatedContent&articles">article and with my name in author list</a>. </p><p>If these programs have only stayed in my hard drive, it is probably worthless, since I‚Äôve learned the knowledge from the code. Instead, after sharing it with others, it‚Äôs something that helps others and makes values, we can get deep satisfaction. And I never thought that I would publish an article on molecular biology, that is a possibility I got from share.</p><h2 id="More-possibilities"><a href="#More-possibilities" class="headerlink" title="More possibilities"></a>More possibilities</h2><blockquote><p>You can‚Äôt connect the dots looking forward; you can only connect them looking backward. So you have to trust that the dots will somehow connect in your future.</p><p>‚Äì Steve Jobs </p></blockquote><p>Looking back, I think the inspirations and contributions I have made are all dots, which in some aspects have brought changes and possibilities to my career. </p><p> I‚Äôve met and know more people in the community, learn new things about programming, follow the things that interested me. Recently I started another side hustle,  I get paid to contribute to open source projects for a company.  These are the possibilities that  I never thought of. </p><p>And now a wave of companies that create open-source software has emerged in worldwide, such as <a href="https://github.com/pingcap">Pingcap</a>, <a href="https://github.com/vercel/vercel">Vercel</a> and so on. This is a very good trend so that those of us who like to write code have more choices besides IT giants.</p><hr><p>Open-source have changed everything, sharing your code with others will be incredibly rewarding.</p><p>Those great and world-changing open source projects are also started with a small step at the very beginning. When Linus shared his small Kernel, he probably never thought that the entire operating system industry was changed by himself.  When <a href="https://twitter.com/youyuxi">Evan You</a> shared his front-end works, he didn‚Äôt expect Vue to be used by so many companies and people.  </p><p>For anyone who want to know more, I highly recommend these: </p><ul><li><a href="https://amzn.to/3EHlsBj">Working in Public: The Making and Maintenance of Open Source Software</a></li><li><a href="https://www.swyx.io/learn-in-public/">Learn in Public</a></li><li><a href="https://overreacted.io/my-decade-in-review/">My Decade in Review ‚Äî Overreacted</a></li><li><a href="https://scriptconf.org/blog/the-journey-to-full-time-open-source-evan-you/">The Journey to Full Time Open Source</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;I started to use &lt;a href=&quot;https://github.com/chenyukang&quot;&gt;Github in 2010&lt;/a&gt;, when I have learned Git, Ruby in that days.  Github was</summary>
        
      
    
    
    
    
    <category term="Programming" scheme="http://coderscat.com/tags/Programming/"/>
    
    <category term="OpenSource" scheme="http://coderscat.com/tags/OpenSource/"/>
    
  </entry>
  
  <entry>
    <title>My Favorite Tech Blogs</title>
    <link href="http://coderscat.com/my-favorite-tech-blogs/"/>
    <id>http://coderscat.com/my-favorite-tech-blogs/</id>
    <published>2021-12-30T00:09:30.000Z</published>
    <updated>2022-02-11T06:36:12.195Z</updated>
    
    <content type="html"><![CDATA[<p>Today I want to share  some of my favorites tech blogs. I have followed these sites for many years, and I think they are worth your time.  </p><p>The criteria I recommend are:</p><ol><li>Continuous updates for many years</li><li>High quality and some articles have inspired me deeply</li></ol><hr><ul><li><p><a href="https://www.joelonsoftware.com/">Joel on Software</a></p></li><li><p><a href="http://www.paulgraham.com/articles.html">Paul Graham</a></p><p>These two are actually very famous in industry. I still want to share with you, in case some of you may not know. There are too many classic technical articles from these two blogs.</p><p>Joel is co-founder of StackOverflow, and he wrote a nice book: <a href="https://www.joelonsoftware.com/buy-the-books/">Joel on Software</a>.</p><p>Paul Graham was a well-known Lisp programmer and then became an investor, I love his book:<br><a href="https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer/dp/1449389554">Hackers &amp; Painters: Big Ideas from the Computer Age</a></p></li></ul><hr><ul><li><a href="https://eli.thegreenplace.net/">Eli Bendersky‚Äôs website</a></li></ul><p>I remember  I found this blog when I tried to finish all the  SICP exercises in 2008. There are almost all the answers to SICP exercises with detailed explanations!</p><p>What is commendable is that the author Eli Bendersky has always insisted on writing his technical experience, and this blog is continuously updated.  The quality of the content is very high, with both theory and code. For instance, he wrote the Raft series: <a href="https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/">Implementing Raft: Part 0-Introduction</a>, which is simply a model of technical writing.</p><hr><ul><li><a href="https://flaviocopes.com/">Flavio Copes</a></li></ul><p>This blog is maintained by an Italian developer, and the content is mostly on front-end and web development. </p><p>I admire this blog  because he keeps blogging almost every day! What he wrote may not be in depth, but it is useful to many people. I  used SEO tools to read the data of this website, and the organic traffic brought by Google is very high. </p><p>I recommend everyone who want to start with writing to read these two articles:</p><p><a href="https://flaviocopes.com/developer-blog/">Every developer should have a blog. Here‚Äôs why, and how to stick with it</a></p><p><a href="https://flaviocopes.com/blog-seo/">I wrote 1 blog post every day for 2 years. Here‚Äôs 5 things I learned about SEO</a></p><hr><ul><li><a href="https://jvns.ca/">Julia Evans</a></li></ul><p>This blog covering a wide range of fields. This author deeply inspired me to learn programming by understanding internal principles: <a href="https://jvns.ca/blog/learn-how-things-work/">Get better at programming by learning how things work</a> . Of course there are many other technical articles such as: <a href="https://jvns.ca/blog/2014/12/14/fun-with-threads/">Diving into concurrency: trying out mutexes and atomics</a></p><p>And the author has made a lot of fancy e-books: <a href="https://wizardzines.com/">wizard zines</a></p><hr><ul><li><a href="http://journal.stuffwithstuff.com/">journal.stuffwithstuff.com</a></li></ul><p>He wrote  a book on programming language implementation in 6 years, with  the spirit of craftsmanship: <a href="http://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/">Crafting ‚ÄúCrafting Interpreters‚Äù</a></p><p>All the pictures here are drawn by hand, all details on font, color, alignment, etc., all these details are almost perfect, and the final book is an artwork. A technical book can be so beautiful!</p><hr><ul><li><a href="https://www.swyx.io/">swyx‚Äôs site</a></li></ul><p>The  content involves development, personal growth, etc.<br>Among them, the concept of <a href="https://www.swyx.io/learn-in-public/">Learn In Public (swyx.io)</a> touched me a lot, and there are many awesome podcasts on this blog.</p><hr><p>That all for today, if you like it please tell me, I actually have more to share with you. üôå</p><p>See you!</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Today I want to share  some of my favorites tech blogs. I have followed these sites for many years, and I think they are worth your</summary>
        
      
    
    
    
    
    <category term="substack" scheme="http://coderscat.com/tags/substack/"/>
    
  </entry>
  
  <entry>
    <title>Svelte Demo: Movie Seat Booking</title>
    <link href="http://coderscat.com/svelte-demo-movie-seat-booking/"/>
    <id>http://coderscat.com/svelte-demo-movie-seat-booking/</id>
    <published>2021-12-03T07:17:31.000Z</published>
    <updated>2022-02-11T06:36:12.195Z</updated>
    
    <content type="html"><![CDATA[<p>Let‚Äôs continue our journey of learnning Svelte and JavaScript üòä</p><p>This time, we will build a small Web application for movie seat booking. After finishing, we will have a cute demo looks like this:</p><p><img src="/images/ob_pasted-image-20211202213404.png"></p><h2 id="Svelte-onMount"><a href="#Svelte-onMount" class="headerlink" title="Svelte onMount"></a>Svelte <code>onMount</code></h2><p>Because we need to keep the selected seat status after page refreshing, we need to use <code>localStorage</code> to store selected seat indexes , then reloading them when page in reloaded. In <code>Svelte</code>, we need to use <code>onMount</code> to hook up a function to reload data:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">onMount(<span class="hljs-function">() =&gt;</span> &#123;<br> populateUI();<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="Restore-state-and-event-hookup"><a href="#Restore-state-and-event-hookup" class="headerlink" title="Restore state and event hookup"></a>Restore state and event hookup</h2><p>The function <code>populateUI</code> will do 3 things:</p><ol><li>reload selected seats and updated seats count </li><li>update selected movie price </li><li>hook up function for each movie seat click event </li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Get data from localstorage and populate UI</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">populateUI</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-keyword">const</span> selectedSeats = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&quot;selectedSeats&quot;</span>));<br><br> <span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">if</span> (selectedSeats !== <span class="hljs-literal">null</span> &amp;&amp; selectedSeats.length &gt; <span class="hljs-number">0</span>) &#123;<br>  allSeats().forEach(<span class="hljs-function">(<span class="hljs-params">seat, index</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">if</span> (selectedSeats.indexOf(index) &gt; -<span class="hljs-number">1</span>) &#123;<br>    seat.classList.add(<span class="hljs-string">&quot;selected&quot;</span>);<br>    num += <span class="hljs-number">1</span>;<br>   &#125;<br>  &#125;);<br> &#125;<br> count = num;<br><br> <span class="hljs-keyword">const</span> selectedMovieIndex = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&quot;selectedMovieIndex&quot;</span>);<br><br> <span class="hljs-keyword">if</span> (selectedMovieIndex !== <span class="hljs-literal">null</span>) &#123;<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;movie&quot;</span>).selectedIndex = selectedMovieIndex;<br>  movieIndex = selectedMovieIndex;<br> &#125;<br> moviePrice = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;movie&quot;</span>).value;<br><br> <span class="hljs-comment">// Seat click event</span><br> <span class="hljs-keyword">const</span> container = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.container&#x27;</span>);<br> container.addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (<br>   e.target.classList.contains(<span class="hljs-string">&quot;seat&quot;</span>) &amp;&amp;<br>   !e.target.classList.contains(<span class="hljs-string">&quot;occupied&quot;</span>)<br>  ) &#123;<br>   e.target.classList.toggle(<span class="hljs-string">&quot;selected&quot;</span>);<br><br>   updateSelected();<br>  &#125;<br> &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>If we changed the selected movie, we need to update the price for a single movie , so another event hookup in HTML:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;movie-container&quot;</span>&gt;<br> &lt;span&gt;Pick a movie:&lt;/span&gt;<br> &lt;select id=<span class="hljs-string">&quot;movie&quot;</span> on:change=&#123;handleMovieSelect&#125;&gt;<br>  &lt;option value=<span class="hljs-string">&quot;10&quot;</span>&gt;Avengers: Endgame ($<span class="hljs-number">10</span>)&lt;/option&gt;<br>  ...<br> &lt;/select&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="The-logic-for-total-price"><a href="#The-logic-for-total-price" class="headerlink" title="The logic for total price"></a>The logic for total price</h2><p>The function <code>updateSelected</code> will update new selected  movies count. Here, a tricky part is use <code>css selector</code> to get elements:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Update total and count</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateSelected</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-keyword">const</span> selectedSeats = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;.row .seat.selected&quot;</span>);<br><br> <span class="hljs-keyword">const</span> seatsIndex = [...selectedSeats].map(<span class="hljs-function">(<span class="hljs-params">seat</span>) =&gt;</span><br>  [...allSeats()].indexOf(seat)<br> );<br><br> <span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&quot;selectedSeats&quot;</span>, <span class="hljs-built_in">JSON</span>.stringify(seatsIndex));<br> count = selectedSeats.length;<br> &#125;<br></code></pre></td></tr></table></figure><p>How do we calculate  the total price of movies? A nice feature comes from Svelte may help us reduce code complexity :</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$:&#123;<br> total = count * moviePrice;<br>&#125;<br></code></pre></td></tr></table></figure><p>With this snippet, it means whenever  <code>count</code> and <code>moviePrice</code> changed, <code>total</code> will be updated accordingly , nice and simple!</p><hr><p>That‚Äôs all, the whole code for this demo is at: <a href="https://github.com/chenyukang/sveltejs-apps/tree/main/movie-seat-booking">sveltejs-apps (github.com)</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Let‚Äôs continue our journey of learnning Svelte and JavaScript üòä&lt;/p&gt;
&lt;p&gt;This time, we will build a small Web application for movie seat</summary>
        
      
    
    
    
    
    <category term="JavaScript" scheme="http://coderscat.com/tags/JavaScript/"/>
    
    <category term="svelte" scheme="http://coderscat.com/tags/svelte/"/>
    
    <category term="programming" scheme="http://coderscat.com/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>Form Validator In Svelte</title>
    <link href="http://coderscat.com/svelte-form-validator/"/>
    <id>http://coderscat.com/svelte-form-validator/</id>
    <published>2021-11-30T07:17:48.000Z</published>
    <updated>2022-02-11T06:36:12.195Z</updated>
    
    <content type="html"><![CDATA[<p>I begin to write some tutorials on learning Svelte. Again, I‚Äôm also a new front-end developer, so I‚Äôm not sure if I‚Äôm doing is the best practice.</p><p>I will follow the project list of <a href="https://github.com/bradtraversy/vanillawebprojects">vanillawebprojects</a>, try to re-implement the projects with Svelte.<br>I think this is a good way to practice front-end development skills.</p><p>Ok, let‚Äôs go to the <a href="https://github.com/chenyukang/sveltejs-apps/tree/main/form-validator">Svelte Form Validator</a> project.</p><p>It‚Äôs a simple form validator, which will be commonly used in registration UI.</p><p><img src="/images/ob_2021-11-29-16-37-14.png"></p><p>Let‚Äôs create the project directory with the following command:</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npx degit sveltejs/template form-validator<br><span class="hljs-built_in">cd</span> form-validator<br>npm install <br>npm run dev <br></code></pre></td></tr></table></figure><p>Access <a href="http://localhost:5000/">http://localhost:5000</a> will show the demo HTML page.</p><p>The basic structure of a Svelte component is like this:</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-comment">// Component logic goes here</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- HTML goes here --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">  <span class="hljs-comment">/* CSS goes here (scoped by default!) */</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Here, let‚Äôs begin with some JavaScript variables, which will be used in validation.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br> <span class="hljs-keyword">let</span> username = <span class="hljs-string">&quot;&quot;</span>;<br> <span class="hljs-keyword">let</span> email = <span class="hljs-string">&quot;&quot;</span>;<br> <span class="hljs-keyword">let</span> password = <span class="hljs-string">&quot;&quot;</span>;<br> <span class="hljs-keyword">let</span> password2 = <span class="hljs-string">&quot;&quot;</span>;<br>    ...<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="Bind-values"><a href="#Bind-values" class="headerlink" title="Bind values"></a>Bind values</h2><p>Then we will bind the variablesw in HTML elements with <code>bind:value</code> attribute, and hook the <code>handleSubmit</code> function to the <code>on:click</code> event.</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">bind:value</span>=<span class="hljs-string">&#123;username&#125;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Ente username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">bind:value</span>=<span class="hljs-string">&#123;email&#125;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter email&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">on:click</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Validation"><a href="#Validation" class="headerlink" title="Validation"></a>Validation</h2><p>Compared with vanilla JavaScript, we don‚Äôt need to use <code>getElementById</code> to get the HTML elements. The code will be shorter as well. The core logic to do validation is like this:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Event listeners</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleSubmit</span>(<span class="hljs-params">e</span>) </span>&#123;<br> e.preventDefault();<br> <span class="hljs-keyword">if</span> (!checkRequired([[<span class="hljs-string">&quot;username&quot;</span>, username], [<span class="hljs-string">&quot;email&quot;</span>, email], <br>    [<span class="hljs-string">&quot;password&quot;</span>, password], [<span class="hljs-string">&quot;password2&quot;</span>, password2]])) &#123;<br>  checkLength(<span class="hljs-string">&quot;username&quot;</span>, username, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>);<br>  checkLength(<span class="hljs-string">&quot;password&quot;</span>, password, <span class="hljs-number">6</span>, <span class="hljs-number">25</span>);<br>  checkEmail(email);<br>  checkPasswordsMatch(password, password2);<br> &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>To make code shorter, we can use the <code>required</code> attribute to avoid manual checking:</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">bind:value</span>=<span class="hljs-string">&#123;username&#125;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Enter username&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>...<br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">on:submit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>The refactor code commit is at <a href="https://github.com/chenyukang/sveltejs-apps/commit/75ee09f0862d16c158e25ba86cf7b78cfe625736">this</a>.</p><p>That‚Äôs all, the whole project is at : <a href="https://github.com/chenyukang/sveltejs-apps/tree/main/form-validator">form-validator</a> for your reference.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;I begin to write some tutorials on learning Svelte. Again, I‚Äôm also a new front-end developer, so I‚Äôm not sure if I‚Äôm doing is the best</summary>
        
      
    
    
    
    
    <category term="JavaScript" scheme="http://coderscat.com/tags/JavaScript/"/>
    
    <category term="Svelte" scheme="http://coderscat.com/tags/Svelte/"/>
    
  </entry>
  
  <entry>
    <title>Fix missing header files on Ubuntu</title>
    <link href="http://coderscat.com/fix-missing-header-file-on-linux/"/>
    <id>http://coderscat.com/fix-missing-header-file-on-linux/</id>
    <published>2021-11-27T00:00:05.000Z</published>
    <updated>2022-02-11T06:36:12.191Z</updated>
    
    <content type="html"><![CDATA[<p>When we compile software from source code on Linux system, header file missing is an issue which will happen frequently. Just like this error message:</p><p><img src="/images/ob_pasted-image-20211126232844.png"></p><p>Usually, you may copy the keyword from error message and search on Google, try to find some missing packages we need to install. But we have a better an unified solution, <code>apt-file</code> is for fixing this kind of issue.</p><p>Let‚Äôs install <code>apt-file</code> firstly with these command:</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get install apt-file <br>sudo apt-file update <br></code></pre></td></tr></table></figure><p>Then search the header file with it:</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">coderscat@MININT-ODP168:~/code/espanso$ apt-file search xdo.h<br>libxdo-dev: /usr/include/xdo.h<br>libxdo-dev: /usr/share/doc/libxdo-dev/html/structxdo.html <br></code></pre></td></tr></table></figure><p>Ok, we get the package  name we are missing, install it with <code>apt-get</code> and problem will be solved.</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo apt-get install libxdo-dev<br></code></pre></td></tr></table></figure><p>Another useful command to list files installed by a DEB package:</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">dpkg --listfiles libxdo-dev<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;When we compile software from source code on Linux system, header file missing is an issue which will happen frequently. Just like this</summary>
        
      
    
    
    
    
    <category term="Tools" scheme="http://coderscat.com/tags/Tools/"/>
    
    <category term="Linux" scheme="http://coderscat.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>How to Keep A Program Running with Ssh logout</title>
    <link href="http://coderscat.com/how-to-keep-program-running-with-ssh-logout/"/>
    <id>http://coderscat.com/how-to-keep-program-running-with-ssh-logout/</id>
    <published>2021-11-25T15:08:01.000Z</published>
    <updated>2022-02-11T06:36:12.191Z</updated>
    
    <content type="html"><![CDATA[<p>Some times we need to keep jobs running without a <code>ssh</code> session, here there are three ways to achieve this. I suggest to learn a terminal multiplexer in long term,  it‚Äôs really useful when you have long time working on Linux/Unix system.</p><h2 id="Option-1-nohup"><a href="#Option-1-nohup" class="headerlink" title="Option 1: nohup"></a>Option 1: <code>nohup</code></h2><p>The best and simplest way is:</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">nohup long-running-command &amp;<br></code></pre></td></tr></table></figure><p>It was made specifically for this, by default it will log stdout to <code>nohup.log</code>, if  standard output is not a terminal, logs will be appended to <code>~/nohup.log</code>.  If you want to specify the output log into a different file: </p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">nohup COMMAND &gt; FILE<br></code></pre></td></tr></table></figure><p>More details can refer to <code>man nohup</code>. What <code>nohup</code> does, is to effectively separate the process from the terminal:</p><ul><li>It closes standard input (the program will <em>not</em> be able to read any input, even if it is run in the foreground. it is not halted, but will receive an error code or <code>EOF</code>).</li><li>It redirects standard output and standard error to the file <code>nohup.out</code>, so the program won‚Äôt fail for writing to standard output if the terminal fails, so whatever the process writes is not lost.</li><li>It prevents the process from receiving a <code>SIGHUP</code> (thus the name).</li></ul><h2 id="Option-2-bg-and-disown"><a href="#Option-2-bg-and-disown" class="headerlink" title="Option 2: bg and disown"></a>Option 2: bg and disown</h2><p>If you already have started the program and don‚Äôt want restart it, we can use  <code>ctrl+z</code> to stop current execution and then use <code>bg</code> to resume it and switch the running program to background (We can use <code>fg</code> to pull the job to frontground)</p><p>Finally we use <code>disown</code> to remove the process from the shell‚Äôs job control. </p><p>So, even you logout from a <code>ssh</code> session, the program will still keep running in background.</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ctrl+z<br><span class="hljs-built_in">bg</span><br><span class="hljs-built_in">disown</span> -h<br></code></pre></td></tr></table></figure><h2 id="Option-3-Use-terminal-multiplexer"><a href="#Option-3-Use-terminal-multiplexer" class="headerlink" title="Option 3: Use terminal multiplexer"></a>Option 3: Use terminal multiplexer</h2><p>We have three choices for this, [[screen]], [[tmux]], and [[byobu]].</p><p><code>screen</code> and <code>tmux</code> is mostly used ones. On Ubuntu or Debian system, we install it with:</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">sudo apt-get install screen <br>sudo apt-get install tmux<br></code></pre></td></tr></table></figure><p><a href="https://www.byobu.org/">Byobu</a> is an enhancement for the GNU Screen, you can install it with this commands:</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">sudo add-apt-repository ppa:byobu&#x2F;ppa<br>sudo apt-get update<br>sudo apt-get install byobu<br></code></pre></td></tr></table></figure><p>From my user experience, <code>tmux</code> will be enough for daily usage, if you would like to have a try, refer to this guide: <a href="https://pragmaticpineapple.com/gentle-guide-to-get-started-with-tmux/">Gentle Guide to Get Started With tmux | Pragmatic Pineapple üçç</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Some times we need to keep jobs running without a &lt;code&gt;ssh&lt;/code&gt; session, here there are three ways to achieve this. I suggest to</summary>
        
      
    
    
    
    
    <category term="Tools" scheme="http://coderscat.com/tags/Tools/"/>
    
    <category term="Linux" scheme="http://coderscat.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Rust Warp: Use Cookie for Authorization</title>
    <link href="http://coderscat.com/rust-warp-use-cookie-for-authorization/"/>
    <id>http://coderscat.com/rust-warp-use-cookie-for-authorization/</id>
    <published>2021-11-24T13:20:03.000Z</published>
    <updated>2022-02-11T06:36:12.195Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/seanmonstar/warp">Warp</a> is a composable, web server in Rust. It‚Äôs code is very small and focus on speed.</p><p>The fundamental building block of <code>warp</code> is the <code>Filter</code>, they can be combined and composed to express rich requirements on requests.</p><p>But it‚Äôs actually not easy to use if you are not familiar with it‚Äôs concept, and the type system will also scare some beginners.</p><p>For example, I actually spend some time to figure out how to use Cookie for authorization. </p><p>Suppose we have defined a Struct to represent the User: </p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs Rust"><br><span class="hljs-meta">#[derive(Debug, Deserialize)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">User</span></span> &#123;<br>    username: <span class="hljs-built_in">String</span>,<br>    password: <span class="hljs-built_in">String</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>And we have a logic to authorize whether the login request has a valid username and password, the detail implementation depends on your code:</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">verify_user</span></span>(user: &amp;User) -&gt; <span class="hljs-built_in">bool</span> &#123;<br> ....<br>&#125;<br></code></pre></td></tr></table></figure><p>The question is how to set a Cookie in response and how to verify each request after authorization. </p><h3 id="Set-a-cookie"><a href="#Set-a-cookie" class="headerlink" title="Set a cookie"></a>Set a cookie</h3><p>When a user send login request and passed the authorization, we use <code>reply</code> with <code>with_header</code> to set a cookie to store a token, which will be used for later requests:</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">let</span> login = warp::path!(<span class="hljs-string">&quot;api&quot;</span> / <span class="hljs-string">&quot;login&quot;</span>)<br>       .and(warp::post())<br>       .and(warp::body::json())<br>       .map(|user: auth::User| &#123;<br>           <span class="hljs-keyword">if</span> auth::verify_user(&amp;user) &#123;<br>               <span class="hljs-keyword">let</span> token = auth::gen_token();<br>               warp::reply::with_header(<br>                   token.clone(),<br>                   <span class="hljs-string">&quot;set-cookie&quot;</span>,<br>                   <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;token=&#123;&#125;; Path=/; HttpOnly; Max-Age=1209600&quot;</span>, token),<br>               )<br>               .into_response()<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               warp::reply::with_status(<span class="hljs-string">&quot;failed&quot;</span>, http::StatusCode::UNAUTHORIZED).into_response()<br>           &#125;<br>       &#125;);<br>   <span class="hljs-keyword">let</span> routes = routes.or(login);<br></code></pre></td></tr></table></figure><h3 id="Use-cookie-for-Authorization"><a href="#Use-cookie-for-Authorization" class="headerlink" title="Use cookie for Authorization"></a>Use cookie for Authorization</h3><p>To authorize request, we need to implement a <code>filter</code> in Warp, and use it like this, here we use <code>Filter::untuple_one</code> to unroll nested tuple layers from extractions.</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">let</span> verify = warp::path!(<span class="hljs-string">&quot;api&quot;</span> / <span class="hljs-string">&quot;verify&quot;</span>)<br>      .and(warp::get())<br>      .and(auth_validation())<br>      .untuple_one()<br>      .map(|| warp::reply::reply().into_response());<br>  <span class="hljs-keyword">let</span> routes = routes.or(verify);<br></code></pre></td></tr></table></figure><p>And the <code>auth_validation</code> will call another built-in filter <code>warp::cookie</code> to extract the <code>token</code> from request header:</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs Rust"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Unauthorized</span></span>;<br><br><span class="hljs-keyword">impl</span> reject::Reject <span class="hljs-keyword">for</span> Unauthorized &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">auth_validation</span></span>() -&gt; <span class="hljs-keyword">impl</span> Filter&lt;Extract = ((),), Error = Rejection&gt; + <span class="hljs-built_in">Copy</span> &#123;<br>    warp::cookie::&lt;<span class="hljs-built_in">String</span>&gt;(<span class="hljs-string">&quot;token&quot;</span>).and_then(|token: <span class="hljs-built_in">String</span>| <span class="hljs-keyword">async</span> <span class="hljs-keyword">move</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;token: &#123;&#125;&quot;</span>, token);<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-literal">Some</span>(<span class="hljs-literal">true</span>) = auth::verify_token(&amp;token) &#123;<br>            <span class="hljs-literal">Ok</span>(())<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-literal">Err</span>(warp::reject::custom(Unauthorized))<br>        &#125;<br>    &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Some-thoughts"><a href="#Some-thoughts" class="headerlink" title="Some thoughts"></a>Some thoughts</h3><p>Even I have spent some time writing code in Rust, I still need to learn some new concepts or some details in a Web framework such as Warp. From my experience, there are some unnatural part for users who used to some other programming languages. For example, the return type of a filter: </p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">impl</span> Filter&lt;Extract = ((),), Error = Rejection&gt; + <span class="hljs-built_in">Copy</span><br></code></pre></td></tr></table></figure><p>It‚Äôs just not so easy to say what this mean? And why we need to call <code>untuple_one</code> with the filter? </p><p>I know we must obey the rules of type system, and we need to add more annotations when writing Rust code, it‚Äôs just not so easy for learning as other programming languages. </p><p>Even so, I‚Äôm still having fun with it for it bringing some new things for programming.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/seanmonstar/warp&quot;&gt;Warp&lt;/a&gt; is a composable, web server in Rust. It‚Äôs code is very small and focus on</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="http://coderscat.com/tags/Rust/"/>
    
    <category term="Warp" scheme="http://coderscat.com/tags/Warp/"/>
    
  </entry>
  
  <entry>
    <title>The Best Way To Learn Frontend As An Experienced Programmer</title>
    <link href="http://coderscat.com/the-way-to-learn-frontend/"/>
    <id>http://coderscat.com/the-way-to-learn-frontend/</id>
    <published>2021-11-23T15:33:36.000Z</published>
    <updated>2022-02-11T06:36:12.195Z</updated>
    
    <content type="html"><![CDATA[<p>I have done some front-end programming recently. Even I have been coding for almost 16 years, I haven‚Äôt done much on the front-end in my coding time.</p><p>The reason is, I never found Front-end programming interesting. I thought front-end is only manipulate the HTML elements, and provides some styles for the UI of web. I found CSS is trivial and there is not logic behind the css code. We must remember a lot of stuff to write CSS. I don‚Äôt want to remember ‚Ä¶</p><p>Until recently, I have done more work in front-end. My career don‚Äôt involve front-end much , but I have spent some time to learn it by myself. The motivation behind it is my side-project. </p><p>I finished several projects in my spare time, and got more interests on it. Here are some of my projects:</p><ul><li><a href="https://github.com/chenyukang/gomoku">gomoku</a></li><li><a href="https://github.com/chenyukang/obweb">obweb</a></li></ul><p>So, with about one year experiences of practice, I improved much on it. I found these rules for learning front-end as an experienced programmer. It also may help for beginners:</p><h3 id="Learn-by-doing"><a href="#Learn-by-doing" class="headerlink" title="Learn by doing"></a>Learn by doing</h3><p>This is always my #1 role of learning programming.</p><p>I guess I still won‚Äôt have learned frontend programming without my side-project. I have some desire on my side-project, I tried to finish it with perfection in my mind.</p><p>Learning frontend is the extra credits of finishing my projects. So, if you don‚Äôt have much desire on learning frontend(or programming), maybe you need to find some thing which interested you, try to find those things attract you desire. For instance, if  you want to develop a game, you may need to learn Game programming or something like C++ programming.</p><p>When you begin to get hands dirty with your keyboard, other things will follow.</p><p>If you don‚Äôt find any good project to start with, here are some learn-by-doing style of courses:</p><p><a href="https://www.freecodecamp.org/learn">Learn to Code (freecodecamp.org)</a></p><h3 id="Play-with-open-source-projects"><a href="#Play-with-open-source-projects" class="headerlink" title="Play with open-source projects"></a>Play with open-source projects</h3><p>It‚Äôs the best time for learning programming right  now. Compared with 10 years ago, we have many many open-source projects to learn. </p><p>As as a beginner in front-end, I get much fun and interests when I played all the demo of this project: <a href="https://github.com/bradtraversy/vanillawebprojects">Mini projects built with HTML5, CSS &amp; JavaScript.</a>.</p><p>I read the source code of each sub-project, and try to do some modification on them. After finish it, I learned a lot.</p><h3 id="Read-Books-Ignore-Videos"><a href="#Read-Books-Ignore-Videos" class="headerlink" title="Read Books, Ignore Videos"></a>Read Books, Ignore Videos</h3><p>When you want to go deeper about front-end, there are actually a lot of theory stuff need to learn. For these essential knowledge, I would suggest you to learn by reading some classic books, such as: </p><ul><li><a href="https://javascript.info/">The Modern JavaScript Tutorial</a></li><li><a href="https://amzn.to/3nGQB2j">JavaScript: The Definitive Guide: Activate Your Web Pages</a></li></ul><p>There are many videos for learning Web development, it‚Äôs only helpful when you are starting without any experience. If you have got some learning experience, you should step out relay on watching those videos. Because almost none of them will teach you deeper skills and knowledges. Classic books and other authoritative materials will be helpful.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;I have done some front-end programming recently. Even I have been coding for almost 16 years, I haven‚Äôt done much on the front-end in my</summary>
        
      
    
    
    
    
    <category term="JavaScript" scheme="http://coderscat.com/tags/JavaScript/"/>
    
    <category term="Frontend" scheme="http://coderscat.com/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>The Great Programming Quotes</title>
    <link href="http://coderscat.com/the-great-quotes-of-programming/"/>
    <id>http://coderscat.com/the-great-quotes-of-programming/</id>
    <published>2021-07-10T06:11:37.000Z</published>
    <updated>2022-02-11T06:36:12.195Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/kimberly-farmer-lUaaKCUANVI-unsplash.jpg" alt="kimberly-farmer @ unsplash.com"></p><p>Several days ago, I came across <a href="https://twitter.com/id_aa_carmack/status/1047504598527856642?lang=en">John Carmack‚Äôs post</a> on learning programming. His advice is truly helpful for programming beginners and worth more reading.<br>This reminds me to spread other great quotes in mind, which from great programmers and computer scientists. </p><p>Some of them help me understanding more on computing, some of them are principles I‚Äôm trying to apply to my daily work, and some of them are funny üôå.</p><h1 id="Design-and-architecture"><a href="#Design-and-architecture" class="headerlink" title="Design and architecture"></a>Design and architecture</h1><h2 id="Abstraction-is-essential"><a href="#Abstraction-is-essential" class="headerlink" title="Abstraction is essential"></a>Abstraction is essential</h2><blockquote><p>Complexity is anything that makes software hard to understand or to modify.<br>-‚ÄìJohn Ousterhout</p></blockquote><blockquote><p>All problems in computer science can be solved by another level of indirection.<br>‚Äì David Wheeler</p></blockquote><p>The power of these statements can be seen in the domains of software development, design patterns, architecture and hardware design. The computing world is a combination of different abstraction layers, operating system,  networking model, distribution system and graphic libraries are all abstractions, in different levels. </p><p>As software engineers, reduce the complexity of abstractions is our key task in development.</p><h2 id="Keep-design-simple-and-changeable"><a href="#Keep-design-simple-and-changeable" class="headerlink" title="Keep design simple and changeable"></a>Keep design simple and changeable</h2><blockquote><p>Simplicity is prerequisite for reliability.<br>‚Äì Edsger Dijkstra</p></blockquote><blockquote><p>Walking on water and developing software from a specification are easy if both are frozen.<br>‚Äì Edward V Berard</p></blockquote><blockquote><p>Design is the art of arranging code to work today, and be changeable forever.<br>-‚Äì Sandi Metz</p></blockquote><blockquote><p>There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.<br>‚Äì C.A.R. Hoare.</p></blockquote><p>The Dutch computer pioneer Dijkstra, had many profound insights on computing complexity and algorithms. He is possibly one of favorite computer scientist in world wide. One of his most cherished habits was in creating <a href="https://www.cs.utexas.edu/users/EWD/">amazing articles with a fountain pen</a>. </p><p>Simplicity doesn‚Äôt mean doing less; rather, it‚Äôs a way to keep your software maintainable.</p><p>When you start writing code, you tend to make it very complex. As you become an experienced programmer, you will find keeping things simple is the surest way to build complex systems.</p><p>The ability to make complex things simple is what sets apart a great programmer from an average one.</p><h1 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h1><h2 id="Coding-in-a-right-way"><a href="#Coding-in-a-right-way" class="headerlink" title="Coding in a right way"></a>Coding in a right way</h2><blockquote><p>Make it work, make it right, make it fast.<br>‚Äì Kent Beck</p></blockquote><blockquote><p>When in doubt, use brute force.<br>‚Äî‚ÄîKen Thompson</p></blockquote><blockquote><p>The sooner you start to code, the longer the program will take.<br>‚Äî‚Äî Roy Carlson</p></blockquote><blockquote><p>If you can‚Äôt write it down in English, you can‚Äôt code it.<br>‚Äî‚Äî Peter Halpern</p></blockquote><blockquote><p>Get your data structures correct first, and the rest of the program will write itself.<br>‚Äî‚Äî David Jones</p></blockquote><blockquote><p>Don‚Äôt write a new program if one already does moie or less what you want. And if you must write a program, use existing code to do as much of the work as possible.<br>‚Äî‚Äî Richard Hill</p></blockquote><blockquote><p>We better hurry up and start coding, there are going to be a lot of bugs to fix. &#128527;<br>‚Äì Anonymous </p></blockquote><p>I‚Äôm always happy to follow these principles when programming. These advice helped me to save a lot of time. Remember, do the right thing at proper time. Make sure you have a good design before you start writing the code, otherwise you will most likely to rollback the finished work.</p><h2 id="Optimize-it-or-not"><a href="#Optimize-it-or-not" class="headerlink" title="Optimize it or not"></a>Optimize it or not</h2><blockquote><p>Before optimizing, use a profiler to locate the ‚Äúhot spots‚Äù of the program.<br>‚Äî‚Äî Mike Morton</p></blockquote><blockquote><p>In non-I/O-bound programs, less than four per cent of a program generally accounts for more than half of its running time.<br>‚Äî‚Äî Don Knuth</p></blockquote><blockquote><p>Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.</p><p>Yet we should not pass up our opportunities in that critical 3%. A good programmer will not be lulled into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified.<br> ‚Äî‚Äî Don Knuth</p></blockquote><p><em>Premature optimization</em> means starting to optimize a program without ‚Äúhot spot‚Äù tracing. You won‚Äôt fix performance issue and introduce bugs in this way of optimization.</p><h2 id="Keep-code-readable"><a href="#Keep-code-readable" class="headerlink" title="Keep code readable"></a>Keep code readable</h2><blockquote><p>Programs must be written for people to read, and only incidentally for machines to execute.<br>-‚Äì Hal Abelson and Gerald Sussman. Structure and Interpretation of Computer Programs</p></blockquote><blockquote><p>It‚Äôs harder to read code than to write it<br>‚Äì joel spolsky</p></blockquote><blockquote><p>Any fool can write code that a computer can understand. Good programmers write code that humans can understand.<br>‚Äì Martin Fowler</p></blockquote><blockquote><p>Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.<br>‚Äì Rick Osborne</p></blockquote><blockquote><p>Don‚Äôt comment bad code. Rewrite it.<br>‚Äì Brian Kernighan</p></blockquote><blockquote><p>Good code is its own best documentation. As you‚Äôre about to add a comment, ask yourself:<br>‚ÄòHow can I improve the code so that this comment isn‚Äôt needed?‚Äô<br>‚Äì Steve McConnell (Code Complete)</p></blockquote><blockquote><p>If the code and the comments disagree, then both are probably wrong.<br>‚Äî‚Äî Norm Schryer</p></blockquote><blockquote><p>When explaining a command, or language feature, or hardware widget, first describe the problem it is designed to solve.<br>‚Äî‚Äî David Martin</p></blockquote><blockquote><p>Code is like humor. When you have to explain it, it‚Äôs bad.<br>-‚Äì Cory House</p></blockquote><p>Do you have trouble in reading the code written by yourself two years ago? </p><p>A single piece of code will be read hundreds, maybe thousands of times, by different programmers. </p><p>Good programmers will write easy to understand the code, and don‚Äôt care whether the machine can run(this is compiler or interpreter‚Äôs job).</p><p>Comments will help much on making code readable. But too much of comments also will not help. If the code is self-explanatory, there is no need for comments. Even if you do need a comment, the comment should be about why you did it, not about what you did.</p><p>When writing code, it is better to be clear than to be clever. ‚ÄúBe cleaver‚Äù is something like: condensing multiple lines of code into one, using those tricky algorithms, or using some obscure feature of programming language to accomplish a task in a novel way. Tricky code will make it hard to maintain.</p><h1 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h1><blockquote><p>Testing can show the presence of bugs, but not their absence.<br>‚Äî‚Äî Edsger W. Dijkstra</p></blockquote><blockquote><p>If debugging is the process of removing bugs, programming must be the process of putting them in.<br>‚Äì Edsger Dijkstra</p></blockquote><blockquote><p>Testing leads to failure, and failure leads to understanding.<br>‚Äì Burt Rutan</p></blockquote><blockquote><p>It takes 3 times the effort to find and fix bugs in system test than when done by the developer. It takes 10 times the effort to find and fix bugs in the field than when done in system test. Therefore insist on unit tests by the developer.<br>‚Äì Larry Bernstein</p></blockquote><p>There is no doubt on the importance of testing. I‚Äôm afraid to maintain a code base which don‚Äôt contains enough test cases. We should try to find bugs in development phase as many as possible.</p><p>Unit testing, integrated testing, fuzzing testing are all good practices to improve the coding quantity. From my experience, the testing code is also document for code, which helpful for others understanding code.</p><p>Embrace testing, it will save you much of time.</p><h1 id="Deugging"><a href="#Deugging" class="headerlink" title="Deugging"></a>Deugging</h1><blockquote><p>Of all my programming bugs, 80% are syntax errors. Of the remaining 20%, 80% are trivial logical errors. Of the remaining 4%, 80% are pointer errors. And the remaining 0.8% are hard.<br>‚Äî‚Äî Marc Donner</p></blockquote><blockquote><p>The first step in fixing a broken program is getting it to fail repeatably.<br>‚Äî‚Äî Tom Duff</p></blockquote><blockquote><p>Programming is like sex. One mistake and you have to support it for the rest of your life.<br>‚Äì Michael Sinz</p></blockquote><p>Debugging is a last-ditch effort to save the code. Debugging code is more difficult than writing code. Because when we need to debug, it means the error have escaped from coding, reviewing, and testing. </p><p>Usually, finding out the root cause of a bug is much harder than fixing it. If you reproduced a bug, you almost finished 80% of work.</p><p>I‚Äôm a fan of Printf Debugging(a.k.a Caveman Debugging). </p><blockquote><p>The most effective debugging tool is still careful thought, coupled with judiciously placed print statements.<br>-‚Äî Brian Kernighan, ‚ÄúUnix for Beginners‚Äù (1979)</p></blockquote><blockquote><p>Debuggers don‚Äôt remove bugs. They only show them in slow motion.<br>‚Äì Anonymous</p></blockquote><h1 id="Productivity"><a href="#Productivity" class="headerlink" title="Productivity"></a>Productivity</h1><blockquote><p>Don‚Äôt reapeat yourself. Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.<br>‚Äì Andy Hunt and Dave Thomas</p></blockquote><blockquote><p>I‚Äôm not a great programmer; I‚Äôm just a good programmer with great habits.<br>‚Äì Kent Beck</p></blockquote><p>Lazy programmers are good programmers, who want to do avoid duplication and won‚Äôt do thing reputably.</p><p>If there is a lot of repetition in the code, it is likely that we should spend time to refactor the code. Most repetitive tasks are better suited to be done by machines, so we should let it be automated.</p><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><blockquote><p>The most disastrous thing that you can ever learn is your first programming language.<br>‚Äì Alan Kay</p></blockquote><blockquote><p>A language that doesn‚Äôt affect the way you think about programming is not worth knowing.<br>‚Äï Alan J. Perlis</p></blockquote><p>Programming languages, editors, libraries, all are tools for programmers. Pick out the tools you will use frequently, we should know them well, polish them, and make them to be productive.</p><h1 id="Learning"><a href="#Learning" class="headerlink" title="Learning"></a>Learning</h1><blockquote><p>The only way to learn a new programming language is by writing programs in it.<br>‚Äì Dennis Ritchie</p></blockquote><blockquote><p>The first principle is that you must not fool yourself and you are the easiest person to fool.<br>‚Äï- Richard P. Feynman</p></blockquote><blockquote><p>Avoid ‚Äúcookbook programming‚Äù, where you copy and paste bits of code that you have found to make something work. Make sure you fully understand what everything it actually doing, and that you are comfortable applying the techniques in other situations.<br>‚Äì John </p></blockquote><blockquote><p>Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.<br>‚Äì Eric S. Raymond</p></blockquote><blockquote><p>Programming isn‚Äôt about what you know; it‚Äôs about what you can figure out.<br>‚Äì Chris Pine</p></blockquote><blockquote><p>Theory is when you know something, but it doesn‚Äôt work. Practice is when something works, but you don‚Äôt know why. Programmers combine theory and practice: Nothing works and they don‚Äôt know why.<br>‚Äì Anonymous</p></blockquote><p>When I learned programming, I was also anxious about knowing the details, the programming language syntax, IDEs, frameworks, etc.</p><p>We have a ton to learn. This way of learning will make beginners frustrated. </p><p>Instead, don‚Äôt learn details, learn the essentials and concepts, apply them in practice. Problem-solving is the skill we end up using most. Finally, don‚Äôt lose your curiosity on your learning journey.</p><hr><p>That‚Äôs all, hope you enjoy it and share with us your favorite programming quote.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/kimberly-farmer-lUaaKCUANVI-unsplash.jpg&quot; alt=&quot;kimberly-farmer @ unsplash.com&quot;&gt;&lt;/p&gt;
&lt;p&gt;Several days ago, I came across</summary>
        
      
    
    
    
    
    <category term="Writing" scheme="http://coderscat.com/tags/Writing/"/>
    
    <category term="Programming" scheme="http://coderscat.com/tags/Programming/"/>
    
    <category term="General" scheme="http://coderscat.com/tags/General/"/>
    
  </entry>
  
  <entry>
    <title>Why Github Copilot Will Not Change Programming</title>
    <link href="http://coderscat.com/why-copilot-wont-change-programming/"/>
    <id>http://coderscat.com/why-copilot-wont-change-programming/</id>
    <published>2021-07-03T07:35:18.000Z</published>
    <updated>2022-02-11T06:36:12.195Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jason-leung-HBGYvOKXu8A-unsplash.jpg" alt="jason-leung @ unsplash.com"></p><p>The hottest new tech of last week is <a href="https://copilot.github.com/">Github Copilot</a>. It seems like almost all programmers are playing or waiting to play with this new fancy AI coding assistant.</p><p>Some say this is an innovative game-changer that will totally change the world of programming!</p><p>But I am not so optimistic about it. From my perspective as an old-school programmer, this kind of tool looks fancy but is not as helpful as some people claim. Not to mention, it will be no substitute for real programmers.</p><p>Let me explain.</p><h2 id="Coding-Faster-is-Not-a-Big-Deal"><a href="#Coding-Faster-is-Not-a-Big-Deal" class="headerlink" title="Coding Faster is Not a Big Deal"></a>Coding Faster is Not a Big Deal</h2><p>Think about it. How much time do you spend on coding?</p><p>In fact, in most software companies, the time we spend on writing code is not a high proportion of the overall software development cycle ‚Äî even less than a quarter of it.</p><p>We spend much more time on requirements analysis, technical design, testing, debugging, and team collaboration.</p><p>Software engineering is hard, mostly because of the high complexity of the real world. We can‚Äôt change this ‚Äî over time, abstractions in computing are inevitable. No project ever failed due to slow coding.</p><p><img src="../images/still-is-code.jfif" alt="still code"></p><p>Coding faster will not make you a better programmer. Abstraction, design, and the experience of real-world engineering are what will make you a better software engineer.</p><p>Some older programmers type slowly due to poor eyesight, but they write bug-free code.</p><h2 id="Will-it-Help-Us-to-Code-Faster"><a href="#Will-it-Help-Us-to-Code-Faster" class="headerlink" title="Will it Help Us to Code Faster?"></a>Will it Help Us to Code Faster?</h2><p>Years ago I was fascinated by this kind of programming aid. There‚Äôs a popular template system in Emacs called <a href="https://github.com/joaotavora/yasnippet">snippets</a>. We define our own templates and functions, then a shortcut generates a code template and we just fill in the rest.</p><p>It looks cool, really cool. It makes me into a super programmer, like in the movies!</p><p>But, after I got deep into it, I realized it wasn‚Äôt as useful as I thought. Coding speed is not my bottleneck, and I spend less time on coding as my career develops.</p><p><a href="https://www.tabnine.com/">tabnine</a> is a similar AI programming assistant tool with Copilot, which generates part of the code based on your previous inputs. Copilot will even makes suggestions based on your comments, the name of the function, and so on.</p><p>The problem is, when I‚Äôm coding with it, <strong>I need to constantly review whether the auto-completion is right</strong>.</p><p><img src="../images/E5IbxwXWYAUoi3U.png" alt="copilot-funny"></p><p>This is a distraction for me. Imagine you are an experienced and solid programmer ‚Äî this AI tool that you are pair-coding with is a na√Øve and occasionally dumb one. No, I don‚Äôt want it!</p><p>From my experience, the best way to make me program faster is:</p><ul><li><em>focus, focus, and focus</em>.</li><li>Think clearly before coding</li></ul><p>Shortcuts, variable completion, class attributes, and method names completion are all helpful for coding faster ‚Äî they will help your typing catch up with thinking.</p><p>But code generation is a different thing. It will distract you, even more than 50% of the completion catches your coding intention, the other nonsense part will slow you down.</p><p>Of course, if the codebase contains a lot of repetitive pieces or logic, this kind of tool can definitely speed up your coding. For example, most front-end programming, and web programming contains lots of similar CRUD logic.</p><p>But I don‚Äôt believe this stuff will make a fundamental change to programming. And, at least for me, I won‚Äôt be coding faster with it.</p><h2 id="Will-it-Help-With-Learning-Programming"><a href="#Will-it-Help-With-Learning-Programming" class="headerlink" title="Will it Help With Learning Programming?"></a>Will it Help With Learning Programming?</h2><p>Copilot will help to reduce duplicated tasks, like searching code from the Web. As a beginner to learn programming, it may help you, since when you type some keywords, the code snippet will show up in front of you.</p><p>However, let me remind you that copying and making it work is not a good way to improve your coding ability or quality of your work.</p><p>Instant code suggestions may make you happy when coding, but they will not help you in the long term.</p><p><img src="../images/freestocks-p_jg3JF68SQ-unsplash.jpg" alt="Photo by unsplash.com/@freestocks"></p><p>Programming a craft, just like writing and painting. We are writing source code to express ideas. Do you think it‚Äôs a good idea to let an AI assist a learner in what the next sentence or paragraph will be?</p><p><em>Word completion will help, but sentence auto-completion will become a burden.</em></p><p>It‚Äôs the same as writing. If we want to be better at programming, the only way is to code and read a lot.</p><p><a href="https://d3dvortex.blogspot.com/2005/07/programming-advice-from-john-carmack-i.html">John Carmack</a>, when talking about learning programming says:</p><blockquote><p>Avoid ‚Äúcookbook programming‚Äù, where you copy and paste bits of code that you have found to make something work. Make sure you fully understand what everything it actually doing, and that you are comfortable applying the techniques in other situations.</p></blockquote><h2 id="The-Potential-Risks"><a href="#The-Potential-Risks" class="headerlink" title="The Potential Risks"></a>The Potential Risks</h2><p>There are several extra risks come with AI coding assistance:</p><ul><li><p>Potential bugs. If the user didn‚Äôt pay attention to review the generated code, it will be a nightmare.</p></li><li><p>The copyright and ownership issue of code. If a code snippet is <a href="https://twitter.com/mitsuhiko/status/1410886329924194309">generated from GPL authorized code</a> base and is adapted by a commercial company. Whose fault is it if it does not work? And who is the owner when the code is generated?</p></li><li><p>Security. Is it possible for hackers to train some code snippets intensively and induce attacking code to users?</p></li></ul><h2 id="The-Potential-Benefits"><a href="#The-Potential-Benefits" class="headerlink" title="The Potential Benefits"></a>The Potential Benefits</h2><p>Of course, as a new thing, Copilot may also bring some benefits in some scenarios.</p><ul><li><p>To make this tool more useful, we may trend towards writing more meaningful names and better documents.</p></li><li><p>Interviewing may be easier, if we are allowed to use it.</p></li><li><p>It may give you a feeling that someone is always there for you and you are not so alone when programming. Maybe it‚Äôs a better feeling than a little yellow duck!</p></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/jason-leung-HBGYvOKXu8A-unsplash.jpg&quot; alt=&quot;jason-leung @ unsplash.com&quot;&gt;&lt;/p&gt;
&lt;p&gt;The hottest new tech of last week is &lt;a</summary>
        
      
    
    
    
    
    <category term="Writing" scheme="http://coderscat.com/tags/Writing/"/>
    
  </entry>
  
</feed>
